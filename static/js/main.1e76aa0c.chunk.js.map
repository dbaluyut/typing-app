{"version":3,"sources":["hooks/useKeyPress.jsx","App.js","reportWebVitals.js","index.js"],"names":["useKeyPress","callback","useState","keyPressed","setKeyPressed","useEffect","downHandler","key","length","upHandler","window","addEventListener","removeEventListener","App","e","keyCode","target","document","body","preventDefault","par","faker","lorem","paragraph","Array","fill","join","leftPadding","setLeftPadding","outgoingChars","setOutgoingChars","charAt","currentChar","setCurrentChar","substr","incomingChars","setIncomingChars","currentLine","updatedOutgoingChars","updatedIncomingChars","substring","split","querySelector","clientHeight","greenBox","gbScrollPos","scrollTop","console","log","cbOffset","offsetTop","lastOffset","scrollBy","scrollAm","className","style","top","id","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"2PAGA,IA+BeA,EA/BK,SAACC,GAAa,MAEIC,qBAFJ,mBAEzBC,EAFyB,KAEbC,EAFa,KA4BhC,OAxBAC,qBAAU,WAER,IAAMC,EAAc,SAAC,GAAa,IAAXC,EAAU,EAAVA,IACjBJ,IAAeI,GAAsB,IAAfA,EAAIC,SAC5BJ,EAAcG,GACdN,GAAYA,EAASM,KAInBE,EAAY,WAChBL,EAAc,OAOhB,OAHAM,OAAOC,iBAAiB,UAAWL,GACnCI,OAAOC,iBAAiB,QAASF,GAE1B,WAELC,OAAOE,oBAAoB,UAAWN,GACtCI,OAAOE,oBAAoB,QAASH,OAIjCN,G,QCkFMU,MA3Gf,WACEH,OAAOC,iBAAiB,WAAW,SAAUG,GAC1B,IAAbA,EAAEC,SAAiBD,EAAEE,QAAUC,SAASC,MAC1CJ,EAAEK,oBAKN,IAAMC,EAAMC,IAAMC,MAAMC,YARX,EAUyBrB,mBACpC,IAAIsB,MAAM,IAAIC,KAAK,KAAKC,KAAK,KAXlB,mBAUNC,EAVM,KAUOC,EAVP,OAa6B1B,mBAAS,IAbtC,mBAaN2B,EAbM,KAaSC,EAbT,OAcyB5B,mBACpCkB,EAAIW,OAAO,IAfA,mBAcNC,EAdM,KAcOC,EAdP,OAiB6B/B,mBACxCkB,EAAIc,OAAO,IAlBA,mBAiBNC,EAjBM,KAiBSC,EAjBT,OAqByBlC,mBAAS,GArBlC,mBAqBNmC,EArBM,KA4Eb,OA5Ea,KA4BbrC,GAAY,SAACO,GAEX,IAAI+B,EAAuBT,EACvBU,EAAuBJ,EAGvB5B,IAAQyB,IAENL,EAAYnB,OAAS,GACvBoB,EAAeD,EAAYa,UAAU,IAIvCV,EADAQ,GAAwBN,GAIxBC,EAAeE,EAAcJ,OAAO,KAGpCQ,EAAuBJ,EAAcK,UAAU,IACtBC,MAAM,KAAKjC,OAAS,KAC3C+B,GAAwB,IAzBrBlB,IAAMC,MAAMC,aA2BjBa,EAAiBG,IAGPtB,SAASyB,cAAc,cACfC,aADpB,IAGIC,EAAW3B,SAASyB,cACtB,sBAEEG,EAAcD,EAASE,UAC3BC,QAAQC,IAAIH,GACZ,IACII,EADYhC,SAASyB,cAAc,WACdQ,UACrBC,EAAa,GACbC,EAAW,EACf,GAAIH,EAAWE,EAAY,CACzB,IAAIE,EAAWJ,EAAWE,EAC1BC,GAAYC,EACZF,GAAcE,EACdT,EAASE,UAAYM,EAEvBL,QAAQC,IAAIC,MAKZ,qBAAKK,UAAU,MAAf,SAKE,qBAAKA,UAAU,YAAf,SAME,qBAAKA,UAAU,oBAAf,SACE,oBACEA,UAAU,YACVC,MAAO,CAAEC,IAAKnB,EAAc,MAF9B,UAIE,sBAAMiB,UAAU,gBAAhB,SACGzB,IAEH,sBAAMyB,UAAU,oBAAoBG,GAAG,SAAvC,SACGzB,IAEH,+BAAOG,EAAcD,OAAO,eC7FzBwB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,+BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFpD,SAASqD,eAAe,SAM1BZ,K","file":"static/js/main.1e76aa0c.chunk.js","sourcesContent":["import { useState, useEffect } from 'react';\n\n//1\nconst useKeyPress = (callback) => {\n  //2\n  const [keyPressed, setKeyPressed] = useState();\n  //3\n  useEffect(() => {\n    //4\n    const downHandler = ({ key }) => {\n      if (keyPressed !== key && key.length === 1) {\n        setKeyPressed(key);\n        callback && callback(key);\n      }\n    };\n    //5\n    const upHandler = () => {\n      setKeyPressed(null);\n    };\n\n    //6\n    window.addEventListener('keydown', downHandler);\n    window.addEventListener('keyup', upHandler);\n\n    return () => {\n      //7\n      window.removeEventListener('keydown', downHandler);\n      window.removeEventListener('keyup', upHandler);\n    };\n  });\n  //8\n  return keyPressed;\n};\n\nexport default useKeyPress;\n","import { useState } from 'react';\nimport faker from 'faker';\nimport ScriptContainer from './script-container/ScriptContainer';\nimport useKeyPress from './hooks/useKeyPress';\nimport './App.css';\n\nfunction App() {\n  window.addEventListener('keydown', function (e) {\n    if (e.keyCode == 32 && e.target == document.body) {\n      e.preventDefault();\n    }\n  });\n\n  // states\n  const par = faker.lorem.paragraph();\n\n  const [leftPadding, setLeftPadding] = useState(\n    new Array(20).fill(' ').join('')\n  );\n  const [outgoingChars, setOutgoingChars] = useState('');\n  const [currentChar, setCurrentChar] = useState(\n    par.charAt(0)\n  );\n  const [incomingChars, setIncomingChars] = useState(\n    par.substr(1)\n  );\n\n  const [currentLine, setCurrentLine] = useState(0);\n\n  function generate() {\n    return faker.lorem.paragraph();\n  }\n\n  // keypress\n  useKeyPress((key) => {\n    //1\n    let updatedOutgoingChars = outgoingChars;\n    let updatedIncomingChars = incomingChars;\n\n    //2\n    if (key === currentChar) {\n      //3\n      if (leftPadding.length > 0) {\n        setLeftPadding(leftPadding.substring(1));\n      }\n      //4\n      updatedOutgoingChars += currentChar;\n      setOutgoingChars(updatedOutgoingChars);\n\n      //5\n      setCurrentChar(incomingChars.charAt(0));\n\n      //6\n      updatedIncomingChars = incomingChars.substring(1);\n      if (updatedIncomingChars.split(' ').length < 10) {\n        updatedIncomingChars += ' ' + generate();\n      }\n      setIncomingChars(updatedIncomingChars);\n    }\n\n    let parEl = document.querySelector('.Character');\n    let pHeight = parEl.clientHeight;\n\n    let greenBox = document.querySelector(\n      '.incomingContainer'\n    );\n    let gbScrollPos = greenBox.scrollTop;\n    console.log(gbScrollPos);\n    let cursorBox = document.querySelector('#cursor');\n    let cbOffset = cursorBox.offsetTop; //32\n    let lastOffset = 32; //32\n    let scrollBy = 0;\n    if (cbOffset > lastOffset) {\n      let scrollAm = cbOffset - lastOffset;\n      scrollBy += scrollAm;\n      lastOffset += scrollAm;\n      greenBox.scrollTop = scrollBy;\n    }\n    console.log(cbOffset);\n    // let scrollBy =\n  });\n\n  return (\n    <div className='App'>\n      {/* <ScriptContainer />\n       */}\n      {/* <p>{outgoingChars}</p> */}\n\n      <div className='container'>\n        {/* <div className='outgoingContainer'>\n          <p className='outgoing'>\n            {outgoingChars.slice(outgoingChars - 2)}\n          </p>\n        </div> */}\n        <div className='incomingContainer'>\n          <p\n            className='Character'\n            style={{ top: currentLine + 'ch' }}\n          >\n            <span className='Character-out'>\n              {outgoingChars}\n            </span>\n            <span className='Character-current' id='cursor'>\n              {currentChar}\n            </span>\n            <span>{incomingChars.substr(0)}</span>\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}