{"version":3,"sources":["hooks/useKeyPress.jsx","bg-music/test2.mp3","components/BgVideo.js","App.js","typing-scripts/script1.js","reportWebVitals.js","index.js"],"names":["useKeyPress","callback","useState","keyPressed","setKeyPressed","useEffect","downHandler","key","length","upHandler","window","addEventListener","removeEventListener","BgVideo","index","ci","setCI","currentBG","changeBG","console","log","setTimeout","playsInline","autoPlay","muted","loop","id","src","App","e","keyCode","target","document","body","preventDefault","par","runningCount","setRunningCount","ghostCount","setGhostCount","lives","setLives","startGame","setStartGame","isPlaying","setIsPlaying","isLoading","setIsloading","outgoingChars","setOutgoingChars","charAt","currentChar","setCurrentChar","substr","incomingChars","setIncomingChars","updatedOutgoingChars","updatedIncomingChars","substring","greenBox","querySelector","cursorBox","lastOffset","offsetTop","scrollBy","refEl","parentEl","currentOffset","scrollTop","scrollBy1Line","className","bgMusic","playing","preload","onLoad","color","loading","onClick","ssi","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.7873b332.chunk.js","sourcesContent":["import { useState, useEffect } from 'react';\n\n//1\nconst useKeyPress = (callback) => {\n  //2\n  const [keyPressed, setKeyPressed] = useState();\n  //3\n  useEffect(() => {\n    //4\n    const downHandler = ({ key }) => {\n      if (keyPressed !== key && key.length === 1) {\n        setKeyPressed(key);\n        callback && callback(key);\n      }\n    };\n    //5\n    const upHandler = () => {\n      setKeyPressed(null);\n    };\n\n    //6\n    window.addEventListener('keydown', downHandler);\n    window.addEventListener('keyup', upHandler);\n\n    return () => {\n      //7\n      window.removeEventListener('keydown', downHandler);\n      window.removeEventListener('keyup', upHandler);\n    };\n  });\n  //8\n  return keyPressed;\n};\n\nexport default useKeyPress;\n","export default __webpack_public_path__ + \"static/media/test2.3d223df7.mp3\";","import { useState, useEffect } from 'react'\n\nfunction BgVideo({ index }) {\n  const videoLinks = [\n    'https://thumbs.gfycat.com/BreakableGlaringImpala-mobile.mp4',\n    'https://thumbs.gfycat.com/InsignificantPlainBlobfish-mobile.mp4',\n    'https://thumbs.gfycat.com/AchingUnsightlyHarrierhawk-mobile.mp4',\n  ]\n\n  const els = [\n    <source src='https://thumbs.gfycat.com/BreakableGlaringImpala-mobile.mp4'></source>,\n    <source src='https://thumbs.gfycat.com/InsignificantPlainBlobfish-mobile.mp'></source>,\n    <source src='https://thumbs.gfycat.com/AchingUnsightlyHarrierhawk-mobile.mp4'></source>,\n  ]\n\n  const [ci, setCI] = useState(1)\n  //   const [currentBG, setCurrentBG] = useState(\n  //     videoLinks[currentIndex]\n  //   )\n\n  let currentBG = videoLinks[ci]\n\n  function changeBG() {\n    setCI(ci + 1)\n    console.log(ci)\n  }\n\n  useEffect(() => {\n    setTimeout(changeBG, 1000)\n  }, [])\n\n  return (\n    <video playsInline autoPlay muted loop id='bgVideoLoop'>\n      <source src={currentBG}></source>\n    </video>\n  )\n}\n\nexport default BgVideo\n","import { useState, useEffect } from 'react'\nimport useSound from 'use-sound'\nimport ReactHowler from 'react-howler'\n\nimport useKeyPress from './hooks/useKeyPress'\n// import useStickyState from './hooks/useStickyState'\n// import getAnimeQuote from './typing-scripts/getAnimeQuote'\nimport { script } from './typing-scripts/script1'\nimport bgMusic from './bg-music/test2.mp3'\nimport BgVideo from './components/BgVideo'\nimport BounceLoader from 'react-spinners/BounceLoader'\n// import axios from 'axios'\n\nimport './App.css'\n// import BgMusic from './bg-music/BgMusic'\n\nfunction App() {\n  window.addEventListener('keydown', function (e) {\n    if (e.keyCode === 32 && e.target === document.body) {\n      e.preventDefault()\n    }\n  })\n\n  // states\n\n  const [par, setPar] = useState(script)\n  const [index, setIndex] = useState(1)\n  // running count state\n  const [runningCount, setRunningCount] = useState(0)\n  const [ghostCount, setGhostCount] = useState(0)\n  const [lives, setLives] = useState(8)\n  // const [livesGoal, setLivesGoal] = useState(1)\n  const [quote, setQuote] = useState('')\n  const [startGame, setStartGame] = useState(false)\n  // sound\n\n  const [isPlaying, setIsPlaying] = useState(false)\n  const [isLoading, setIsloading] = useState(true)\n  useEffect(() => {\n    if (ghostCount === 10) {\n      setGhostCount(0)\n      setLives((lives) => lives + 1)\n      // setLivesGoal((livesGoal) => livesGoal + 2)\n    }\n\n    if (lives <= 0 || !startGame) {\n      console.log('pause')\n      setIsPlaying(false)\n    } else if (lives > 0 && startGame) {\n      setIsPlaying(true)\n    }\n  }, [lives, ghostCount, startGame])\n\n  const [outgoingChars, setOutgoingChars] = useState('')\n  const [currentChar, setCurrentChar] = useState(\n    par.charAt(0)\n  )\n  const [incomingChars, setIncomingChars] = useState(\n    par.substr(1)\n  )\n  // keypress\n  useKeyPress((key) => {\n    //1\n    let updatedOutgoingChars = outgoingChars\n    let updatedIncomingChars = incomingChars\n\n    //2\n    if (startGame) {\n      if (key === currentChar) {\n        setRunningCount(runningCount + 1)\n        setGhostCount(ghostCount + 1)\n        //3\n        // if (leftPadding.length > 0) {\n        //   setLeftPadding(leftPadding.substring(1));\n        // }\n        //4\n        updatedOutgoingChars += currentChar\n        setOutgoingChars(updatedOutgoingChars)\n\n        //5\n        setCurrentChar(incomingChars.charAt(0))\n\n        //6\n        updatedIncomingChars = incomingChars.substring(1)\n\n        setIncomingChars(updatedIncomingChars)\n      } else {\n        setRunningCount(0)\n        setGhostCount(0)\n        setLives(lives - 1)\n      }\n\n      let greenBox = document.querySelector(\n        '.incomingContainer'\n      )\n\n      let cursorBox = document.querySelector('#cursor')\n      let cbOffset = cursorBox.offsetTop //32\n      let lastOffset = 32 //32\n      let scrollBy = 0\n      // if (cbOffset > lastOffset) {\n      //   let scrollAm = cbOffset - lastOffset;\n      //   scrollBy += scrollAm;\n      //   lastOffset += scrollAm;\n      //   greenBox.scrollTop = scrollBy;\n      // }\n\n      function scrollBy1Line(refEl, parentEl) {\n        let currentOffset = refEl.offsetTop\n        if (currentOffset > lastOffset) {\n          let scrollAmount = currentOffset - lastOffset\n          scrollBy += scrollAmount\n          lastOffset += scrollBy\n          parentEl.scrollTop = scrollBy\n        }\n      }\n      scrollBy1Line(cursorBox, greenBox)\n    }\n  })\n\n  function handleStart() {\n    // playTest()\n    setStartGame(true)\n  }\n\n  return (\n    <div className='App'>\n      {/* \n      <div id='bgContainer'>\n        <iframe\n          id='bgVideo'\n          frameborder='0'\n          height='100%'\n          width='100%'\n          src='https://youtube.com/embed/VCVQGKvXBPU?autoplay=1&controls=1&showinfo=0&autohide=1'\n        ></iframe>\n      </div> */}\n      <div id='vidWrapper'>\n        <BgVideo index={index} />\n      </div>\n      <div id='appWrapper'>\n        <h1 id='lives'>Lives: {lives}</h1>\n        <ReactHowler\n          src={bgMusic}\n          playing={isPlaying}\n          preload={true}\n          loop={true}\n          onLoad={() => setIsloading(false)}\n        />\n        {/*  */}\n\n        <div className='container '>\n          {!startGame ? (\n            <>\n              {isLoading ? (\n                <div id='loader'>\n                  <BounceLoader\n                    color='white'\n                    loading={isLoading}\n                  />\n                </div>\n              ) : (\n                <div>\n                  <h1 onClick={handleStart} className=''>\n                    click here to start..\n                  </h1>\n                </div>\n              )}\n            </>\n          ) : (\n            <div className='incomingContainer '>\n              <p className='Character'>\n                <span className='Character-out'>\n                  {outgoingChars}\n                </span>\n                <span\n                  className='Character-current'\n                  id='cursor'\n                >\n                  {currentChar}\n                </span>\n                <span>{incomingChars}</span>\n              </p>\n            </div>\n          )}\n        </div>\n        <h1 className='runningCount' ssi>\n          Combo: {runningCount}\n        </h1>\n      </div>\n      {/* <button\n        onClick={() => {\n          {\n            setIndex(index + 1)\n            console.log(index)\n          }\n        }}\n      >\n        change\n      </button> */}\n    </div>\n  )\n}\n\nexport default App\n","const script = `\"Special\" Containment Procedures: The threat posed by SCP-3004 has remained neutralized. Containment of SCP-3004 is focused solely on interception of artifacts that point toward the existence of the Cetlaidi. To that end, archaeological sites in Ireland and Wales should be monitored closely. Artifacts are to be confiscated, cataloged, and incinerated. All SCP-3004 related matters are to be dealt with by the Theology Department. Director Clark is to be notified immediately if any events thought to be SCP-3004 related occur. SCP-3004-1 is believed to have been destroyed or otherwise deterred from the material plane and no longer requires containment. Any information found regarding the existence of the Cicadetta luculenta is to be destroyed and civilians involved amnesticized, due to its connection to SCP-3004. Description: SCP-3004 refers to a series of anomalous events linked to the rituals of a Druidic cult known as the Cetlaidi, or the \"Singers.\" They were located primarily in Ireland during the fifteenth to early nineteenth century. It is known that their worship revolved around the life cycle of the now extinct Cicadetta luculenta.1 Due to the combined actions of various antecedent groups to the Foundation (including the Vatican's Congregation for Otherworldly Acts and the Royal Society for the Imprisonment of Abnormalcy), all knowledge of SCP-3004 and the Singers was destroyed in order to contain SCP-3004-1. As SCP-3004 was thus \"destroyed\", the SCP-3004-1 entity ceased all activity. SCP-3004 events centered around imagery associated with the rites of the Singers. They occurred most commonly during a celebration surrounding a child's entrance into adulthood which was signified by the first loss of primary teeth. These events were theorized to lead to the entrance of their deity, dubbed SCP-3004-1, into local time-space. SCP-3004 events are understood to have been the result of SCP-3004-1 attempting to act upon the material world. It is unclear as to when SCP-3004-1 began to react to the beliefs of the Singers. While there are signs of varied SCP-3004 events, there are few reports that still exist. Artwork relating to SCP-3004 events show Cicadetta luculenta coming from the facial orifices, causing asphyxiation in many. A written record details the sighting of an anomalously large instance of Cicadetta luculenta (believed to be SCP-3004-1) appearing in the sky, the sight of which caused painful boils in those who witnessed it, along with symptoms resembling radiation sickness. Despite this, the Singers were said to have continued their rituals in the face of SCP-3004 events, which was seen as necessitating their destruction. SCP-3004-1 was an entity which interacted with the Singers through their rituals, causing SCP-3004 events. Little is known about the nature of SCP-3004-1. It is theorized to have been a thought form or an extradimensional being that, through happenstance, responded to the rituals of the Singers. There is no data that exists to point toward SCP-3004-1 being anything greater than a Level-3 Pistiphage2 Entity.`;\n\nexport { script };\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <>\n    <App />\n  </>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}